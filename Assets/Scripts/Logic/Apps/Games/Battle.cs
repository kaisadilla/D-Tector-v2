using Kaisa.Digivice.Extensions;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEditor;
using UnityEngine;

namespace Kaisa.Digivice.Apps {
    /* Enemies have three different sets of attacks, generated at random for every game. Each battle, they will use one of these three set of attacks.
     * To achieve this, the saved game has 3 seeds stored and, when a battle commences, one of these 3 seeds is used to create a new sysrand object (battleRNG).
     * Only the enemy attack every turn uses this battleRNG object – other random effects use UnityEngine.Random as to not interfere with the numbers
     * being randomly generated by this object for the enemy attacks.
     */
    public class Battle : DigiviceApp, IAppController {
        //When both Digimons use the same attack, this is the minimum difference in damages for one of them to win the round.
        private const int TIE_DAMAGE_THRESHOLD = 5;
        private enum BattleScreen {
            MainMenu,
            BattleCall_DDocks,
            SpiritList_Elements,
            SpiritList_Spirits,
            DigitsApp,
            Combat_Menu,
            AttackMenu,
            RegularEvolve
        }
        private enum CallType {
            RegularCall,
            CodeCall,
            Digivolution,
            ArmorEvolution,
            SpiritEvolution,
            AncientEvolution
        }
        public enum EndBattleAnimation {
            none = 0,
            EnemyEscapes,
        }
        public enum BattleEffect {
            none = 0,
            EnhancedDamage
        }

        #region Input
        public override void InputA() {
            if (currentScreen == BattleScreen.MainMenu) {
                if (menuIndex == 0) {
                    if (AreAllDDocksUsed) {
                        ddockIndex = 255; //So no ddock is selected and DEFAULT_DIGIMON is summoned.
                        ChooseCurrentDDock();
                    }
                    else {
                        audioMgr.PlayButtonA();
                        ddockPurpose = 0;
                        OpenDDocks();
                    }
                }
                else if (menuIndex == 1) {
                    galleryList = gm.GetAllUnlockedDigimonInStage(Stage.Spirit);
                    if (galleryList.Count > 0) {
                        audioMgr.PlayButtonA();
                        OpenSpiritMenu();
                    }
                    else {
                        audioMgr.PlayButtonB();
                    }
                }
                else if (menuIndex == 2) {
                    audioMgr.PlayButtonA();
                    OpenDigits();
                }
                else if (menuIndex == 3) {
                    audioMgr.PlayButtonA();
                    EscapeBattle();
                }
            }
            else if (currentScreen == BattleScreen.BattleCall_DDocks) {
                if(isDDockUsed[ddockIndex]) {
                    audioMgr.PlayButtonB();
                }
                else {
                    if(ddockPurpose == 1 && gm.logicMgr.IsDDockEmpty(ddockIndex)) {
                        audioMgr.PlayButtonB();
                        return;
                    }
                    audioMgr.PlayButtonA();
                    ChooseCurrentDDock();
                }
            }
            else if (currentScreen == BattleScreen.Combat_Menu) {
                if(SelectedMenuOption == 0) {
                    audioMgr.PlayButtonA();
                    currentScreen = BattleScreen.AttackMenu;
                    attackIndex = 0;
                }
                else if (SelectedMenuOption == 1) {
                    if(CurrentCallPoints > 0) {
                        audioMgr.PlayButtonA();
                        OpenDigivolve();
                    }
                    else {
                        audioMgr.PlayButtonB();
                    }
                }
                else if (SelectedMenuOption == 2) {
                    audioMgr.PlayButtonB();
                    VisualDebug.WriteLine("Battle Cards have not been implemented yet.");
                }
                else if (SelectedMenuOption == 3) {
                    audioMgr.PlayButtonA();
                    ddockPurpose = 1;
                    OpenDDocks();
                }
                else if (SelectedMenuOption == 4) {
                    audioMgr.PlayButtonA();
                    DeportCurrentDigimon();
                }
            }
            else if (currentScreen == BattleScreen.SpiritList_Elements) {
                audioMgr.PlayButtonA();
                OpenSpiritGallery();
            }
            else if (currentScreen == BattleScreen.SpiritList_Spirits) {
                //Check if the player has the necessary spirit forms to evolve into the Digimon they chose.
                Digimon attemptedElection = Database.GetDigimon(galleryList[galleryIndex]);
                bool canChooseDigimon = false;
                if(attemptedElection.spiritType == SpiritType.Hybrid && attemptedElection.spiritType == SpiritType.Ancient) {
                    canChooseDigimon = gm.HasBothFormsOfSpirit(attemptedElection.element);
                }
                else if (attemptedElection.spiritType == SpiritType.Fusion) {
                    canChooseDigimon = gm.HasAllSpiritsForFusion(attemptedElection.name);
                }
                else {
                    canChooseDigimon = true;
                }

                if(canChooseDigimon) {
                    audioMgr.PlayButtonA();
                    ChooseSpiritFromGallery();
                }
                else {
                    audioMgr.PlayButtonB();
                }
            }
            else if (currentScreen == BattleScreen.AttackMenu) {
                audioMgr.PlayButtonA();
                SubmitTurn(attackIndex);
                blockBattleMenuNavigation = false;
            }
            else if (currentScreen == BattleScreen.RegularEvolve) {
                audioMgr.PlayButtonA();
                AttemptRegularDigivolve();
                blockBattleMenuNavigation = true;
                combatMenuIndex = 0;
            }
            else if (currentScreen == BattleScreen.DigitsApp) {
                loadedApp.InputA();
            }
        }
        public override void InputB() {
            if (currentScreen == BattleScreen.MainMenu) {
                gm.EnqueueAnimation(Animations.PaySpiritPower(SpiritPower, SpiritPower));
            }
            else if (currentScreen == BattleScreen.BattleCall_DDocks) {
                CloseDDocks();
                audioMgr.PlayButtonB();
            }
            else if (currentScreen == BattleScreen.Combat_Menu) {
                gm.EnqueueAnimation(Animations.PaySpiritPower(SpiritPower, SpiritPower));
            }
            else if (currentScreen == BattleScreen.SpiritList_Elements) {
                audioMgr.PlayButtonB();
                CloseSpiritMenu();
            }
            else if (currentScreen == BattleScreen.SpiritList_Spirits) {
                audioMgr.PlayButtonB();
                CloseSpiritGallery();
            }
            else if (currentScreen == BattleScreen.AttackMenu) {
                audioMgr.PlayButtonB();
                currentScreen = BattleScreen.Combat_Menu;
            }
            else if (currentScreen == BattleScreen.RegularEvolve) {
                audioMgr.PlayButtonB();
                CloseDigivolve();
            }
            else if (currentScreen == BattleScreen.DigitsApp) {
                loadedApp.InputB();
            }
        }
        public override void InputLeft() {
            if(currentScreen == BattleScreen.MainMenu) {
                audioMgr.PlayButtonA();
                menuIndex = menuIndex.CircularAdd(-1, 3);
            }
            else if (currentScreen == BattleScreen.BattleCall_DDocks) {
                audioMgr.PlayButtonA();
                ddockIndex = ddockIndex.CircularAdd(-1, 3);
            }
            else if (currentScreen == BattleScreen.Combat_Menu) {
                if(blockBattleMenuNavigation) {
                    audioMgr.PlayButtonB();
                }
                else {
                    audioMgr.PlayButtonA();
                    combatMenuIndex = combatMenuIndex.CircularAdd(-1, (byte)(availableMenuOptions.Length - 1));
                }
            }
            else if (currentScreen == BattleScreen.SpiritList_Elements) {
                if (availableElements.Count > 1) {
                    audioMgr.PlayButtonA();
                    elementIndex = elementIndex.CircularAdd(-1, availableElements.Count - 1);
                }
                else {
                    audioMgr.PlayButtonB();
                }
            }
            else if (currentScreen == BattleScreen.SpiritList_Spirits) {
                if (galleryList.Count > 1) {
                    audioMgr.PlayButtonA();
                    galleryIndex = galleryIndex.CircularAdd(-1, galleryList.Count - 1);
                }
                else {
                    audioMgr.PlayButtonB();
                }
            }
            else if (currentScreen == BattleScreen.AttackMenu) {
                audioMgr.PlayButtonA();
                attackIndex = attackIndex.CircularAdd(-1, 2);
            }
            else if (currentScreen == BattleScreen.RegularEvolve) {
                if(callPointsForEvolution <= 1) {
                    audioMgr.PlayButtonB();
                }
                else {
                    audioMgr.PlayButtonA();
                    callPointsForEvolution--;
                }
            }
            else if (currentScreen == BattleScreen.DigitsApp) {
                loadedApp.InputLeft();
            }
        }
        public override void InputRight() {
            if (currentScreen == BattleScreen.MainMenu) {
                audioMgr.PlayButtonA();
                menuIndex = menuIndex.CircularAdd(1, 3);
            }
            else if (currentScreen == BattleScreen.BattleCall_DDocks) {
                audioMgr.PlayButtonA();
                ddockIndex = ddockIndex.CircularAdd(1, 3);
            }
            else if (currentScreen == BattleScreen.Combat_Menu) {
                if (blockBattleMenuNavigation) {
                    audioMgr.PlayButtonB();
                }
                else {
                    audioMgr.PlayButtonA();
                    combatMenuIndex = combatMenuIndex.CircularAdd(1, (byte)(availableMenuOptions.Length - 1));
                }
            }
            else if (currentScreen == BattleScreen.SpiritList_Elements) {
                if (availableElements.Count > 1) {
                    audioMgr.PlayButtonA();
                    elementIndex = elementIndex.CircularAdd(1, availableElements.Count - 1);
                }
                else {
                    audioMgr.PlayButtonB();
                }
            }
            else if (currentScreen == BattleScreen.SpiritList_Spirits) {
                if (galleryList.Count > 1) {
                    audioMgr.PlayButtonA();
                    galleryIndex = galleryIndex.CircularAdd(1, galleryList.Count - 1);
                }
                else {
                    audioMgr.PlayButtonB();
                }
            }
            else if (currentScreen == BattleScreen.AttackMenu) {
                audioMgr.PlayButtonA();
                attackIndex = attackIndex.CircularAdd(1, 2);
            }
            else if (currentScreen == BattleScreen.RegularEvolve) {
                if (callPointsForEvolution >= CurrentCallPoints) {
                    audioMgr.PlayButtonB();
                }
                else {
                    audioMgr.PlayButtonA();
                    callPointsForEvolution++;
                }
            }
            else if (currentScreen == BattleScreen.DigitsApp) {
                loadedApp.InputRight();
            }
        }
        #endregion

        //Tools:
        private AttackChooser enemyAttackChooser;

        //Battle information:
        private uint victoryExp, defeatExp; //The amounts of experience the player will win or lose depending on the outcome of the battle.
        private int playerLevel;
        private int SpiritPower {
            get => gm.logicMgr.SpiritPower;
            set => gm.logicMgr.SpiritPower = value;
        }

        private bool[] isDDockUsed = new bool[4] { false, false, false, false };
        private bool AreAllDDocksUsed => (isDDockUsed[0] && isDDockUsed[1] && isDDockUsed[2] && isDDockUsed[3]);

        private int _currentCallPoints = 10; //Do not use this variable.
        private int CurrentCallPoints {
            get => _currentCallPoints;
            set {
                if (value > 10) value = 10;
                if (value < 0) value = 0;
                _currentCallPoints = value;
            }
        }

        private Digimon originalDigimon; //The original digimon that was summoned. This does not change if the digimon evolves.
        private Digimon friendlyDigimon;
        private MutableCombatStats friendlyStats;
        private bool attacksAwardSP = false; //Only digimons summoned from Battle Call award Spirit Power.
        private bool attacksCostSP = false; //Non-Ancient Spirit-Stage Digimons' have a SP cost in each of their attacks.

        private Digimon enemyDigimon;
        private MutableCombatStats enemyStats;

        //Menus and navigation
        private BattleScreen currentScreen = BattleScreen.MainMenu;
        private byte menuIndex = 0; //0: Battle call, 1: Spirit on, 2: Digits, 3: Escape.
        private byte ddockIndex = 0; //D-Docks 0 to 3.
        private byte ddockPurpose = 0; //0: battle call, 1: boost sacrifice.

        private int[] availableMenuOptions; //0: Attack, 1: Digivolve, 2: Battle Card, 3: Boost, 4: Deport.
        private byte combatMenuIndex = 0;
        private int SelectedMenuOption => availableMenuOptions[combatMenuIndex];

        private byte attackIndex = 0; //0: Energy, 1: Crush, 2: Ability.
        private byte callPointsForEvolution = 0; //The amount of call points that the player is submitting to attempt an evolution.
        private bool blockBattleMenuNavigation = false; //Turns true after taking some actions in battle that force the player to commit to attack that turn.
        //Hybrid gallery menu
        private List<int> availableElements;
        private int elementIndex = 0; //This points which int in availableElements is used as the current element selected.
        private int SelectedElement => availableElements[elementIndex];

        private List<string> galleryList;
        private int galleryIndex = 0;

        private DigiviceApp loadedApp;

        private bool alterDistance;
        private bool isBossBattle;
        private bool? rewardEnemy;
        private EndBattleAnimation winAnimation;
        private Queue<string> extraEnemies;
        private BattleEffect effect;
        private int bossLevel;
        private bool enemyEscapes;

        /// <summary>
        /// Initializes the battle with the given parameters.
        /// </summary>
        /// <param name="enemyDigimon">The name of the enemy Digimon.</param>
        /// <param name="isBossBattle">If true, the battle will be considered a boss battle and apply certain effects.</param>
        /// <param name="rewardEnemy">If true, this will override the default chance of getting the enemy as a reward.</param>
        /// <param name="winAnimation">The animation that will play immediately when the enemy reaches 0 HP.</param>
        /// <param name="extraEnemies">When the enemy is defeated, the next enemy in the queue will appear, until the queue is empty.</param>
        /// <param name="effect">One of the several effects that will apply to the battle.</param>
        /// <returns></returns>
        public Battle Initialize(string enemyDigimon, bool alterDistance, bool isBossBattle = false,
            bool? rewardEnemy = null, EndBattleAnimation winAnimation = EndBattleAnimation.none,
            Queue<string> extraEnemies = null, BattleEffect effect = BattleEffect.none)
        {
            this.enemyDigimon = Database.GetDigimon(enemyDigimon);
            this.alterDistance = alterDistance;
            this.isBossBattle = isBossBattle;
            this.rewardEnemy = rewardEnemy;
            this.winAnimation = winAnimation;
            this.extraEnemies = extraEnemies;
            this.effect = effect;

            //Check for errors:
            if (enemyDigimon == null) {
                VisualDebug.WriteLine($"The digimon passed to the Battle app ({enemyDigimon}) couldn't be found.");
            }

            return this;
        }

        public override void StartApp() {
            playerLevel = gm.logicMgr.GetPlayerLevel();

            AssignEnemyDigimon();

            gm.UpdateLeaverBuster(defeatExp, "");
            InvokeRepeating("DrawScreen", 0f, 0.05f);
        }
        protected override void CloseApp(Screen goToMenu = Screen.Character) {
            VisualDebug.WriteLine("Attempting to close battle.");
            base.CloseApp(goToMenu);
        }


        private void Update() {
            //DrawScreen();
        }

        private void DrawScreen() {
            ClearScreen();

            if(currentScreen == BattleScreen.MainMenu) {
                SetScreen(gm.spriteDB.battle_mainMenu[menuIndex]);
            }
            else if (currentScreen == BattleScreen.BattleCall_DDocks) {
                gm.GetDDockScreenElement(ddockIndex, Parent);
            }
            else if (currentScreen == BattleScreen.Combat_Menu) {
                if (SelectedMenuOption == 0) SetScreen(gm.spriteDB.battle_combatMenu[0]); //Attack
                if (SelectedMenuOption == 1) SetScreen(gm.spriteDB.battle_combatMenu[1]); //Digivolve
                if (SelectedMenuOption == 2) SetScreen(gm.spriteDB.battle_combatMenu[2]); //Battle card
                if (SelectedMenuOption == 3) SetScreen(gm.spriteDB.battle_combatMenu[3]); //Boost
                if (SelectedMenuOption == 4) SetScreen(gm.spriteDB.battle_combatMenu[4]); //Deport
            }
            else if (currentScreen == BattleScreen.AttackMenu) {
                SetScreen(gm.spriteDB.battle_attackMenu[attackIndex]);
            }
            else if (currentScreen == BattleScreen.RegularEvolve) {
                SetScreen(gm.spriteDB.battle_callPoints_chooser);
                ScreenElement.BuildRectangle("EvolutionCP", Parent).SetSize(3 * callPointsForEvolution, 3).SetPosition(1, 27);
            }
            else if (currentScreen == BattleScreen.SpiritList_Elements) {
                if (SelectedElement < 10) {
                    SetScreen(gm.spriteDB.elements[SelectedElement]);
                }
                else {
                    SetScreen(gm.spriteDB.database_spirit_fusion);
                }
            }
            else if (currentScreen == BattleScreen.SpiritList_Spirits) {
                string displayDigimon = galleryList[galleryIndex];
                SetScreen(gm.spriteDB.arrowsSmall);

                Sprite sDigimon;
                if (Database.GetDigimon(displayDigimon).spiritType != SpiritType.Ancient) {
                    sDigimon = gm.spriteDB.GetDigimonSprite(displayDigimon, SpriteAction.Spirit);
                }
                else {
                    sDigimon = gm.spriteDB.GetDigimonSprite(displayDigimon, SpriteAction.Default);
                }

                ScreenElement.BuildSprite("DigimonDisplay", screenDisplay.transform).SetSize(24, 24).SetSprite(sDigimon).Center();
            }
        }

        private void AssignEnemyDigimon() {
            if (isBossBattle) {
                gm.EnqueueAnimation(Animations.EncounterBoss(enemyDigimon.name));

                bossLevel = gm.logicMgr.GetPlayerLevel();
                enemyStats = enemyDigimon.GetBossStats(bossLevel);

                victoryExp = gm.logicMgr.GetExperienceGained(playerLevel, bossLevel);
                defeatExp = gm.logicMgr.GetExperienceGained(bossLevel, playerLevel);

                VisualDebug.WriteLine($"Boss stats for level {bossLevel}: {enemyStats}");
            }
            else {
                gm.EnqueueAnimation(Animations.EncounterEnemy(enemyDigimon.name));

                enemyStats = enemyDigimon.GetRegularStats();
                enemyStats = enemyDigimon.GetRegularStats();

                victoryExp = gm.logicMgr.GetExperienceGained(playerLevel, enemyDigimon.baseLevel);
                defeatExp = gm.logicMgr.GetExperienceGained(enemyDigimon.baseLevel, playerLevel);

                VisualDebug.WriteLine($"Enemy stats: {enemyStats}");
            }
            int battleSeed = gm.GetRandomSavedSeed();
            enemyAttackChooser = new AttackChooser(battleSeed, enemyDigimon.name, enemyStats);

            VisualDebug.WriteLine($"Experience for this battle: {victoryExp} for winning, -{defeatExp} for losing.");
            VisualDebug.WriteLine($"Chosen seed {battleSeed} for the enemy attack chooser.");
        }

        private void OpenDDocks() {
            currentScreen = BattleScreen.BattleCall_DDocks;
            ddockIndex = 0;
        }
        private void CloseDDocks() {
            if(ddockPurpose == 0) {
                currentScreen = BattleScreen.MainMenu;
            }
            else if (ddockPurpose == 1) {
                currentScreen = BattleScreen.Combat_Menu;
            }
        }
        private void ChooseCurrentDDock() {
            if(ddockPurpose == 0) {
                //If the player has no call points left, he will summon Numemon regardless of their choice.
                string digimon = (CurrentCallPoints > 0) ? gm.logicMgr.GetDDockDigimon(ddockIndex) : Constants.DEFAULT_DIGIMON;
                int callPointsBefore = CurrentCallPoints;
                isDDockUsed[ddockIndex] = true;

                currentScreen = BattleScreen.Combat_Menu;
                availableMenuOptions = new int[] { 0, 1, 4 }; //2: Battle-card temporarily disabled.
                combatMenuIndex = 0;

                AssignFriendlyDigimon(digimon, CallType.RegularCall);

                gm.EnqueueAnimation(Animations.SpendCallPoints(callPointsBefore, CurrentCallPoints));
                gm.EnqueueAnimation(Animations.SummonDigimon(digimon));
            }
            else if (ddockPurpose == 1) {
                currentScreen = BattleScreen.Combat_Menu;
                combatMenuIndex = 0;
                blockBattleMenuNavigation = true;
                AttemptBoost(gm.logicMgr.GetDDockDigimon(ddockIndex));
            }
        }
        private void OpenDigivolve() {
            currentScreen = BattleScreen.RegularEvolve;
            callPointsForEvolution = 1;
        }
        private void CloseDigivolve() {
            currentScreen = BattleScreen.Combat_Menu;
        }

        //Todo: Merge this with App.Database, as it's the same code.
        private void OpenSpiritMenu() {
            availableElements = new List<int>();

            HashSet<int> elementsFound = new HashSet<int>(); //a list of elements found that will contain only 1 of each.

            foreach (string d in galleryList) {
                elementsFound.Add((int)Database.GetDigimon(d).element);
            }
            if (gm.GetAllUnlockedFusionDigimon().Count > 0) {
                elementsFound.Add(10);
            }

            availableElements = elementsFound.ToList();
            availableElements.Sort();

            elementIndex = 0;
            currentScreen = BattleScreen.SpiritList_Elements;
        }
        private void CloseSpiritMenu() {
            currentScreen = BattleScreen.MainMenu;
        }
        private void OpenSpiritGallery() {
            galleryIndex = 0;
            currentScreen = BattleScreen.SpiritList_Spirits;
            if (SelectedElement < 10) {
                galleryList = gm.GetAllUnlockedSpiritsOfElement((Element)SelectedElement);
            }
            else {
                galleryList = gm.GetAllUnlockedFusionDigimon();
            }
        }
        private void CloseSpiritGallery() {
            currentScreen = BattleScreen.SpiritList_Elements;
        }
        private void ChooseSpiritFromGallery() {
            string chosenDigimonName = galleryList[galleryIndex];
            Digimon chosenDigimon = Database.GetDigimon(chosenDigimonName);
            if (chosenDigimon.GetSpiritCost(playerLevel) > SpiritPower) {
                chosenDigimonName = Constants.DEFAULT_SPIRIT_DIGIMON;
            }
            if(chosenDigimonName == Constants.DEFAULT_SPIRIT_DIGIMON) {
                AssignFriendlyDigimon(chosenDigimonName, CallType.AncientEvolution);
                gm.EnqueueAnimation(Animations.SpiritEvolution(gm.PlayerChar, chosenDigimonName));
            }
            else {
                if (chosenDigimon.spiritType == SpiritType.Ancient) {
                    int SPbefore = SpiritPower;
                    AssignFriendlyDigimon(chosenDigimonName, CallType.AncientEvolution);
                    gm.EnqueueAnimation(Animations.PaySpiritPower(SPbefore, SpiritPower));
                    gm.EnqueueAnimation(Animations.AncientEvolution(gm.PlayerChar, chosenDigimonName));
                }
                else {
                    AssignFriendlyDigimon(chosenDigimonName, CallType.SpiritEvolution);
                    if (chosenDigimon.spiritType == SpiritType.Human || chosenDigimon.spiritType == SpiritType.Animal) {
                        gm.EnqueueAnimation(Animations.SpiritEvolution(gm.PlayerChar, chosenDigimonName));
                    }
                    else if (chosenDigimon.spiritType == SpiritType.Fusion && chosenDigimon.name != "susanoomon") {
                        gm.EnqueueAnimation(Animations.FusionSpiritEvolution(gm.PlayerChar, chosenDigimonName));
                    }
                    else if (chosenDigimon.spiritType == SpiritType.Fusion && chosenDigimon.name == "susanoomon") {
                        gm.EnqueueAnimation(Animations.SusanoomonEvolution(gm.PlayerChar));
                    }
                }
            }

            availableMenuOptions = new int[] { 0, 3, 4 };
            currentScreen = BattleScreen.Combat_Menu;
            combatMenuIndex = 0;
        }

        private void OpenDigits() {
            currentScreen = BattleScreen.DigitsApp;
            loadedApp = gm.appLoader.LoadApp<CodeInput>(App.CodeInput, this);
            //loadedApp = LoadApp(gm.pAppDigits, gm, this, "true");
        }
        
        private void SubmitCode(string digimon) {
            Digimon d = Database.GetDigimon(digimon);
            //You can't summon Armor- or Spirit-Stage digimon from here.
            if(d.stage == Stage.Armor || d.stage == Stage.Spirit) {
                digimon = Constants.DEFAULT_DIGIMON;
            }
            gm.logicMgr.SetDigimonUnlocked(digimon, true);
            gm.logicMgr.SetDigicodeUnlocked(digimon, true);

            currentScreen = BattleScreen.Combat_Menu;
            availableMenuOptions = new int[] { 0, 1, 4 };
            combatMenuIndex = 0;

            AssignFriendlyDigimon(digimon, CallType.CodeCall);

            gm.EnqueueAnimation(Animations.SummonDigimon(digimon));
        }

        public void CloseLoadedApp(Screen newScreen = Screen.MainMenu) {
            string result;
            if (loadedApp is CodeInput ci) {
                result = ci.ReturnedDigimon;
                if (result != null) {
                    SubmitCode(result);
                }
                else {
                    currentScreen = BattleScreen.MainMenu;
                }
            }
            loadedApp.Dispose();
            loadedApp = null;
        }

        /// <summary>
        /// Assigns a Digimon as the friendly Digimon, and sets up different parameters depending on how it was assigned.
        /// </summary>
        /// <param name="digimon">The digimon to be assigned.</param>
        /// <param name="callType">The way this digimon is being called</param>
        private void AssignFriendlyDigimon(string digimon, CallType callType) {
            friendlyDigimon = Database.GetDigimon(digimon) ?? Database.GetDigimon(Constants.DEFAULT_DIGIMON);

            int friendlyDigimonExtraLevel = 0;
            if (callType == CallType.RegularCall) {
                attacksAwardSP = true;
                CurrentCallPoints -= friendlyDigimon.GetCallCost(playerLevel);

                SummonRegularDigimon();
            }
            else if (callType == CallType.CodeCall) {
                SpiritPower -= 20;
                SummonRegularDigimon();
            }
            else if (callType == CallType.Digivolution) {
                //Store the missing HP to apply it to the new digimon.
                int missingHP = friendlyStats.GetMissingHP();
                friendlyDigimonExtraLevel = gm.logicMgr.GetDigimonExtraLevel(friendlyDigimon.name);
                friendlyStats = friendlyDigimon.GetFriendlyStats(friendlyDigimonExtraLevel);
                friendlyStats.ApplyMissingHP(missingHP);

                //If the player doesn't have the evolution, unlock it.
                if (!gm.logicMgr.GetDigimonUnlocked(friendlyDigimon.name)) {
                    gm.logicMgr.SetDigimonUnlocked(friendlyDigimon.name, true);
                }
            }
            else if (callType == CallType.SpiritEvolution) {
                attacksCostSP = true;
                originalDigimon = friendlyDigimon;
                friendlyStats = friendlyDigimon.GetBossStats(playerLevel);
            }
            else if (callType == CallType.AncientEvolution) {
                SpiritPower -= friendlyDigimon.GetSpiritCost(playerLevel);
                originalDigimon = friendlyDigimon;
                friendlyStats = friendlyDigimon.GetBossStats(playerLevel);
            }

            gm.UpdateLeaverBuster(defeatExp, originalDigimon.name);

            VisualDebug.WriteLine($"Summoned {friendlyDigimon.name} via '{callType}', with extra level {friendlyDigimonExtraLevel} " +
                $"and stats: HP. {friendlyStats.HP}, EN. {friendlyStats.EN}, CR. {friendlyStats.CR}, AB. {friendlyStats.AB}.");

            void SummonRegularDigimon() {
                originalDigimon = friendlyDigimon;
                friendlyDigimonExtraLevel = gm.logicMgr.GetDigimonExtraLevel(digimon);
                friendlyStats = friendlyDigimon.GetFriendlyStats(friendlyDigimonExtraLevel);
            }
        }

        private void AttemptRegularDigivolve() {
            int callPointsBefore = CurrentCallPoints;
            string currentDigimon = friendlyDigimon.name;
            Digimon targetEvolution = Database.GetDigimon(friendlyDigimon.evolution);
            
            CurrentCallPoints -= callPointsForEvolution;
            // (int) < null always evaluates to false.
            if (Random.Range(0f, 1f) < targetEvolution?.GetEvolveChance(playerLevel, callPointsForEvolution)) {
                if (!gm.logicMgr.GetDigimonUnlocked(targetEvolution.name)) {
                    gm.logicMgr.SetDigimonUnlocked(targetEvolution.name, true);
                }
                AssignFriendlyDigimon(targetEvolution.name, CallType.Digivolution);
            }

            gm.EnqueueAnimation(Animations.SpendCallPoints(callPointsBefore, CurrentCallPoints));
            gm.EnqueueAnimation(Animations.RegularEvolution(currentDigimon, friendlyDigimon.name));

            CloseDigivolve();
        }

        private void AttemptBoost(string sacrificeName) {
            Digimon sacrifice = Database.GetDigimon(sacrificeName);
            gm.logicMgr.SetDigimonUnlocked(sacrificeName, false);
            float rng;
            if (sacrifice == null) {
                sacrifice = Database.GetDigimon(Constants.DEFAULT_DIGIMON);
                rng = 1f;
            }
            else {
                rng = Random.Range(0f, 1f);
            }

            if (rng < sacrifice.GetObeyChance(playerLevel)) {
                MutableCombatStats sacrificeStats = sacrifice.GetFriendlyStats(gm.logicMgr.GetDigimonExtraLevel(sacrifice.name));

                friendlyStats.HP += Mathf.CeilToInt(sacrificeStats.HP / 2f);
                friendlyStats.maxHP += Mathf.CeilToInt(sacrificeStats.HP / 2f);
                friendlyStats.EN += sacrificeStats.EN;
                friendlyStats.CR += sacrificeStats.CR;
                friendlyStats.AB += sacrificeStats.AB;

                VisualDebug.WriteLine($"Boost succeeded! New stats: HP: {friendlyStats.HP}, EN: {friendlyStats.EN}, CR: {friendlyStats.CR}, AB: {friendlyStats.AB}");

                gm.EnqueueAnimation(Animations.BoostSucceed(friendlyDigimon.name, sacrifice.name));
            }
            else {
                gm.EnqueueAnimation(Animations.BoostFailed(sacrifice.name));
            }
        }

        private void DeportCurrentDigimon() {
            PlayAnimationDeportDigimon();

            friendlyDigimon = null;
            originalDigimon = null;
            friendlyStats = null;
            attacksAwardSP = false;
            attacksCostSP = false;

            currentScreen = BattleScreen.MainMenu;

            gm.UpdateLeaverBuster(defeatExp, "");
        }

        private void PlayAnimationDeportDigimon() {
            if (friendlyDigimon.stage == Stage.Spirit) {
                gm.EnqueueAnimation(Animations.DeportSpirit(friendlyDigimon.name, gm.PlayerChar));
            }
            else {
                gm.EnqueueAnimation(Animations.DeportDigimon(friendlyDigimon.name));
            }
        }
        private void SubmitTurn(int friendlyAttack) {
            int SPbefore = SpiritPower;
            if (attacksAwardSP) SpiritPower += 3;
            else if (attacksCostSP) {
                SpiritPower -= friendlyDigimon.GetSpiritCost(playerLevel);
                gm.EnqueueAnimation(Animations.PaySpiritPower(SPbefore, SpiritPower));
            }

            int enemyAttack = enemyAttackChooser.Next();
            int winner = ExecuteTurn(ref friendlyAttack, enemyAttack, out bool disobeyed, out int loserHPbefore);
            int loserHPnow = (winner == 0) ? enemyStats.HP : friendlyStats.HP;

            int friendlyEnergy = friendlyStats.GetEnergyRank();
            int enemyEnergy = enemyStats.GetEnergyRank();

            gm.EnqueueAnimation(
                Animations.DisplayTurn(
                    friendlyDigimon.name, friendlyAttack, friendlyEnergy,
                    enemyDigimon.name, enemyAttack, enemyEnergy,
                    winner, disobeyed, loserHPbefore, loserHPnow)
                );

            bool battleEnded = (loserHPnow == 0);

            if (battleEnded && winner == 0 && winAnimation != EndBattleAnimation.none) {
                if(winAnimation == EndBattleAnimation.EnemyEscapes) {
                    gm.EnqueueAnimation(Animations.EnemyEscapes(enemyDigimon.name, friendlyDigimon.name));
                }
            }

            if (attacksAwardSP) {
                gm.EnqueueAnimation(Animations.AWardSpiritPower(SPbefore));
            }

            currentScreen = BattleScreen.Combat_Menu;

            //The player has won or lost the game.
            if (battleEnded) {
                if (winner == 0) WinBattle();
                else LoseBattle();

                VisualDebug.WriteLine($"A digimon has reached 0 HP, and this battle was won by {winner}.");
            }
            else {
                if (attacksCostSP && SpiritPower < friendlyDigimon.GetSpiritCost(playerLevel)) {
                    DeportCurrentDigimon();
                }
            }
        }

        private void WinBattle() {
            gm.DisableLeaverBuster();

            PlayAnimationDeportDigimon();

            if (gm.logicMgr.AddPlayerExperience(victoryExp)) {
                gm.EnqueueAnimation(Animations.LevelUp(playerLevel, gm.logicMgr.GetPlayerLevel()));
            }

            gm.EnqueueAnimation(Animations.CharHappy());

            //50% for regular battles. 0% for boss battles (they get unlocked in TriggerVictoryAgainstBoss).

            if (rewardEnemy == null) {
                rewardEnemy = (isBossBattle) ? true : (Random.Range(0, 2) == 1);
            }
            if (rewardEnemy == true) {
                if(enemyDigimon.stage == Stage.Spirit) {
                    if (gm.logicMgr.RewardDigimon(enemyDigimon.name, out _, out _)) {
                        gm.EnqueueAnimation(Animations.ReceiveSpirit(enemyDigimon.name));
                    }
                    else {
                        gm.EnqueueAnimation(Animations.ReceiveSpirit(enemyDigimon.name));
                        gm.EnqueueAnimation(Animations.UnlockDigimon(enemyDigimon.name, true));
                    }
                }
                else {
                    if (gm.logicMgr.RewardDigimon(enemyDigimon.name, out _, out _)) {
                        gm.EnqueueAnimation(Animations.LevelUpDigimon(enemyDigimon.name));
                    }
                    else {
                        gm.EnqueueAnimation(Animations.UnlockDigimon(enemyDigimon.name));
                    }
                }
            }
            else if (gm.logicMgr.IsAnySpiritLost && Random.Range(0, 3) == 0) {
                string recoveredSpirit = gm.logicMgr.RecoverSpirit();
                gm.EnqueueAnimation(Animations.ReceiveSpirit(recoveredSpirit));
                gm.EnqueueAnimation(Animations.UnlockDigimon(recoveredSpirit, true));
            }

            if (isBossBattle) {
                TriggerVictoryAgainstBoss();
            }
            else if (alterDistance) {
                int distanceBefore = gm.WorldMgr.CurrentDistance;
                gm.WorldMgr.ReduceDistance(300);
                int distanceAfter = gm.WorldMgr.CurrentDistance;
                gm.EnqueueAnimation(Animations.ChangeDistance(distanceBefore, distanceAfter));
            }

            gm.logicMgr.IncreaseTotalWins();
            gm.logicMgr.IncreaseTotalBattles();

            CloseApp();
        }
        private void LoseBattle() {
            gm.DisableLeaverBuster();

            PlayAnimationDeportDigimon();

            if (gm.logicMgr.RemovePlayerExperience(defeatExp)) {
                gm.EnqueueAnimation(Animations.LevelDown(playerLevel, gm.logicMgr.GetPlayerLevel()));
            }

            gm.EnqueueAnimation(Animations.CharSad());

            bool punishFriendly = (Random.Range(0f, 1f) > Database.GetEraseChance(originalDigimon.name));
            //If the friendly Digimon is not a Spirit, you might lose it.
            if(originalDigimon.stage != Stage.Spirit) {
                //If the player has extra levels with that digimon, they will always lose one.
                if (gm.logicMgr.GetDigimonExtraLevel(originalDigimon.name) > 0) punishFriendly = true;

                if (punishFriendly) {
                    if (gm.logicMgr.PunishDigimon(originalDigimon.name, out int levelBefore, out int levelAfter)) {
                        if (Random.Range(0, 2) == 0) gm.IsCharacterDefeated = true;
                        gm.EnqueueAnimation(Animations.LevelDownDigimon(originalDigimon.name));
                    }
                    else {
                        gm.IsCharacterDefeated = true;
                        gm.EnqueueAnimation(Animations.EraseDigimon(originalDigimon.name));
                    }
                }
            }
            //Lose your Spirit if you were fighting with one.
            else {
                gm.IsCharacterDefeated = true;
                gm.logicMgr.LoseSpirit(originalDigimon.name);
                gm.EnqueueAnimation(Animations.LoseSpirit(originalDigimon.name, enemyDigimon.name));
            }

            if (alterDistance) {
                int distanceBefore = gm.WorldMgr.CurrentDistance;
                int amountToIncrease = isBossBattle ? 500 : 300;
                gm.WorldMgr.IncreaseDistance(amountToIncrease);
                int distanceAfter = gm.WorldMgr.CurrentDistance;
                gm.EnqueueAnimation(Animations.ChangeDistance(distanceBefore, distanceAfter));
            }

            gm.logicMgr.IncreaseTotalBattles();

            CloseApp();
        }
        private void EscapeBattle() {
            gm.DisableLeaverBuster();

            gm.EnqueueAnimation(Animations.DeportSprite(gm.PlayerCharSprites[0], 32));

            if (gm.logicMgr.RemovePlayerExperience(defeatExp)) {
                gm.EnqueueAnimation(Animations.LevelDown(playerLevel, gm.logicMgr.GetPlayerLevel()));
            }

            int distanceBefore = gm.WorldMgr.CurrentDistance;
            gm.WorldMgr.IncreaseDistance(2000);
            int distanceAfter = gm.WorldMgr.CurrentDistance;

            gm.EnqueueAnimation(Animations.CharSad());
            gm.EnqueueAnimation(Animations.ChangeDistance(distanceBefore, distanceAfter));

            gm.logicMgr.IncreaseTotalBattles();

            CloseApp();
        }
        private void TriggerVictoryAgainstBoss() {
            int currentWorld = gm.WorldMgr.CurrentWorld;
            int currentMap = gm.WorldMgr.CurrentWorld;
            int currentArea = gm.WorldMgr.CurrentArea;
            gm.WorldMgr.SetAreaCompleted(currentMap, currentArea, true);
            List<int> availableAreas = gm.WorldMgr.GetUncompletedAreas(currentMap);

            if (availableAreas.Count > 0) {
                int newArea = availableAreas.GetRandomElement();
                gm.WorldMgr.MoveToArea(currentMap, newArea);
                int newDistance = gm.WorldMgr.CurrentDistance;
                gm.EnqueueAnimation(Animations.ForcedTravelMap(currentWorld, currentArea, newArea, newDistance));
            }
            else {
                gm.CompleteWorld(currentWorld);
            }

        }

        /// <summary>
        /// Executes the turn and returns the winner. It also outputs the Attack chosen by the enemy
        /// and the life the loser had before being damaged.
        /// This method receives friendlyAttack by reference and will modify it if the Digimon decides to
        /// disobey.
        /// </summary>
        /// <param name="friendlyAttack">The Attack chosen by the player.</param>
        private int ExecuteTurn(ref int friendlyAttack, int enemyAttack, out bool disobeyed, out int loserHPbefore) {
            disobeyed = false;

            if (Random.Range(0f, 1f) > originalDigimon.GetIdleChance(playerLevel)) {
                friendlyAttack = 3;
                disobeyed = true;
                VisualDebug.WriteLine("The friendly digimon disobeyed and didn't attack.");
            }
            else if (Random.Range(0f, 1f) > originalDigimon.GetObeyChance(playerLevel)) {
                friendlyAttack = Random.Range(0, 3);
                disobeyed = true;
                VisualDebug.WriteLine("The friendly digimon disobeyed and used a random attack.");
            }

            int winner = ChooseWinner(friendlyAttack, enemyAttack, out int damageDealt);

            loserHPbefore = (winner == 0) ? enemyStats.HP : friendlyStats.HP;

            if (winner == 0) DamageDigimon(1, damageDealt);
            if (winner == 1) DamageDigimon(0, damageDealt);

            return winner;
        }
        private int ChooseWinner(int friendlyAttack, int enemyAttack, out int damageDealt) {
            int friendlyDamage = friendlyStats.GetAttackDamage(friendlyAttack);
            int enemyDamage = enemyStats.GetAttackDamage(enemyAttack);
            VisualDebug.WriteLine($"friendly damage: {friendlyDamage}, enemy damage: {enemyDamage}");
            if(friendlyAttack == 3) {
                damageDealt = enemyDamage;
                return 1;
            }
            else if(friendlyAttack == enemyAttack) {
                int difference = friendlyDamage - enemyDamage;
                damageDealt = Mathf.Abs(difference);

                //If both Digimons used Energy and their Energies have different rank (have different sprite), the higher rank energy always wins.
                if (friendlyAttack == 0 && friendlyStats.GetEnergyRank() != enemyStats.GetEnergyRank()) {
                    return (friendlyStats.GetEnergyRank() > enemyStats.GetEnergyRank()) ? 0 : 1;
                }
                //Else, if both Digimon
                else {
                    if (difference <= -TIE_DAMAGE_THRESHOLD) return 1; //The enemy dealt 5+ more damage than the player.
                    if (difference >= TIE_DAMAGE_THRESHOLD) return 0; //The player dealt 5+ more damage than the enemy.
                    else return 2;
                }
            }
            else {
                if(friendlyAttack == 0) {
                    if (enemyAttack == 2) {
                        damageDealt = friendlyDamage;
                        return 0;
                    }
                    else if (enemyAttack == 1) {
                        damageDealt = enemyDamage;
                        return 1;
                    }
                }
                else if (friendlyAttack == 1) {
                    if (enemyAttack == 0) {
                        damageDealt = friendlyDamage;
                        return 0;
                    }
                    else if (enemyAttack == 2) {
                        damageDealt = enemyDamage;
                        return 1;
                    }
                }
                else if (friendlyAttack == 2) {
                    if (enemyAttack == 1) {
                        damageDealt = friendlyDamage;
                        return 0;
                    }
                    else if (enemyAttack == 0) {
                        damageDealt = enemyDamage;
                        return 1;
                    }
                }
            }

            VisualDebug.WriteLine("There was an unknown error choosing the winner of this round.");
            damageDealt = -1;
            return 2;
        }
        private void DamageDigimon(int digimon, int damage) {
            //Enemy bosses receive less damage from attacks.
            if(isBossBattle && digimon == 1) {
                damage -= Mathf.FloorToInt(10f + (0.4f * playerLevel));
                if (damage < 0) damage = 0;
            }

            if(digimon == 0) {
                friendlyStats.HP -= (friendlyStats.HP - damage > 0) ? damage : friendlyStats.HP;
            }
            else if (digimon == 1) {
                enemyStats.HP -= (enemyStats.HP - damage > 0) ? damage : enemyStats.HP;
            }
        }

        public void CheatEnergy() {
            if (friendlyStats != null) friendlyStats.EN = 300;
        }
    }
}