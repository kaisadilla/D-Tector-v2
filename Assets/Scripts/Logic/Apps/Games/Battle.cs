using Kaisa.Digivice.Extensions;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics.Eventing.Reader;
using UnityEngine;
using sysrand = System.Random;

namespace Kaisa.Digivice.App {
    /* Enemies have three different sets of attacks, generated at random for every game. Each battle, they will use one of these three set of attacks.
     * To achieve this, the saved game has 3 seeds stored and, when a battle commences, one of these 3 seeds is used to create a new sysrand object (battleRNG).
     * Only the enemy attack every turn uses this battleRNG object – other random effects use UnityEngine.Random as to not interfere with the numbers
     * being randomly generated by this object for the enemy attacks.
     */
    public class Battle : DigiviceApp {
        private enum BattleScreen {
            MainScreen,
            BattleCall_DDocks,
            BattleCall_Menu,
            AttackMenu
        }

        #region Input
        public override void InputA() {
            if (currentScreen == BattleScreen.MainScreen) {
                if(menuIndex == 0) {
                    audioMgr.PlayButtonA();
                    OpenDDocks();
                }
            }
            else if (currentScreen == BattleScreen.BattleCall_DDocks) {
                audioMgr.PlayButtonA();
                ChooseCurrentDDock();
            }
            else if (currentScreen == BattleScreen.BattleCall_Menu) {
                if(battleCallMenuIndex == 0) {
                    audioMgr.PlayButtonA();
                    currentScreen = BattleScreen.AttackMenu;
                    attackIndex = 0;
                }
            }
            else if (currentScreen == BattleScreen.AttackMenu) {
                audioMgr.PlayButtonA();
                DoRegularTurn(attackIndex);
            }
        }
        public override void InputB() {
            if (currentScreen == BattleScreen.MainScreen) {
                audioMgr.PlayButtonB();
            }
            else if (currentScreen == BattleScreen.BattleCall_DDocks) {
                CloseDDocks();
                audioMgr.PlayButtonB();
            }
            else if (currentScreen == BattleScreen.BattleCall_Menu) {
                audioMgr.PlayButtonB();
            }
            else if (currentScreen == BattleScreen.AttackMenu) {
                audioMgr.PlayButtonB();
                currentScreen = BattleScreen.BattleCall_Menu;
            }
        }
        public override void InputLeft() {
            if(currentScreen == BattleScreen.MainScreen) {
                audioMgr.PlayButtonA();
                menuIndex = menuIndex.CircularAdd(-1, 3);
            }
            else if (currentScreen == BattleScreen.BattleCall_DDocks) {
                audioMgr.PlayButtonA();
                ddockIndex = ddockIndex.CircularAdd(-1, 3);
            }
            else if (currentScreen == BattleScreen.BattleCall_Menu) {
                audioMgr.PlayButtonA();
                battleCallMenuIndex = battleCallMenuIndex.CircularAdd(-1, 3);
            }
            else if (currentScreen == BattleScreen.AttackMenu) {
                audioMgr.PlayButtonA();
                attackIndex = attackIndex.CircularAdd(-1, 2);
            }
        }
        public override void InputRight() {
            if (currentScreen == BattleScreen.MainScreen) {
                audioMgr.PlayButtonA();
                menuIndex = menuIndex.CircularAdd(1, 3);
            }
            else if (currentScreen == BattleScreen.BattleCall_DDocks) {
                audioMgr.PlayButtonA();
                ddockIndex = ddockIndex.CircularAdd(1, 3);
            }
            else if (currentScreen == BattleScreen.BattleCall_Menu) {
                audioMgr.PlayButtonA();
                battleCallMenuIndex = battleCallMenuIndex.CircularAdd(1, 3);
            }
            else if (currentScreen == BattleScreen.AttackMenu) {
                audioMgr.PlayButtonA();
                attackIndex = attackIndex.CircularAdd(1, 2);
            }
        }
        #endregion

        //Tools:
        private sysrand enemyAttackRNG;

        //Battle information:
        private int victoryExp, defeatExp; //The amounts of experience the player will win or lose depending on the outcome of the battle.
        private int playerLevel;

        private bool isBossBattle;
        private int bossLevel;
        private bool[] isDDockUsed = new bool[4] { false, false, false, false };

        private Digimon friendlyDigimon;
        private MutableCombatStats friendlyStats;

        private Digimon enemyDigimon;
        private MutableCombatStats enemyStats;

        //Menus and navigation
        private BattleScreen currentScreen = BattleScreen.MainScreen;
        private byte menuIndex = 0; //0: Battle call, 1: Spirit on, 2: Digits, 3: Escape.
        private byte ddockIndex = 0; //D-Docks 0 to 3.
        private byte battleCallMenuIndex = 0; //0: Attack, 1: Digivolve, 2: Battle Card, 3: Deport.
        private byte attackIndex = 0; //0: Energy, 1: Crush, 2: Ability.

        protected override void StartApp() {
            enemyDigimon = gm.DatabaseMgr.GetDigimon(appArgs[0]);
            //Check for errors:
            if (enemyDigimon == null) throw new System.Exception("The digimon passed to the Battle app couldn't be found.");

            int playerLevel = gm.logicMgr.GetPlayerLevel();
            InitializeRNG();

            if (appArgs.Length == 2) {
                isBossBattle = (appArgs[1] == "true");
            }

            if(isBossBattle) {
                gm.PlayAnimation(gm.screenMgr.AEncounterBoss(enemyDigimon.name));

                bossLevel = gm.logicMgr.GetPlayerLevel();
                enemyStats = enemyDigimon.GetBossStats(bossLevel);
                VisualDebug.WriteLine($"Boss stats for level {bossLevel}: {enemyStats}");

                victoryExp = gm.logicMgr.ExperienceGained(playerLevel, bossLevel);
                defeatExp = gm.logicMgr.ExperienceGained(bossLevel, playerLevel);
            }
            else {
                gm.PlayAnimation(gm.screenMgr.AEncounterEnemy(enemyDigimon.name));

                enemyStats = enemyDigimon.GetRegularStats();
                VisualDebug.WriteLine($"Enemy stats: {enemyStats}");

                victoryExp = gm.logicMgr.ExperienceGained(playerLevel, enemyDigimon.baseLevel);
                defeatExp = gm.logicMgr.ExperienceGained(enemyDigimon.baseLevel, playerLevel);
            }

            gm.UpdateLeaverBuster(defeatExp, "");
            //InvokeRepeating("DrawScreen", 0f, 0.05f);
        }

        private void Update() {
            DrawScreen();
        }

        private void DrawScreen() {
            ClearScreen();

            if(currentScreen == BattleScreen.MainScreen) {
                SetScreen(gm.spriteDB.battle_mainMenu[menuIndex]);
            }
            else if (currentScreen == BattleScreen.BattleCall_DDocks) {
                gm.BuildDDockSprite(ddockIndex, Parent);
            }
            else if (currentScreen == BattleScreen.BattleCall_Menu) {
                if (battleCallMenuIndex == 0) SetScreen(gm.spriteDB.battle_combatMenu[0]); //Attack
                if (battleCallMenuIndex == 1) SetScreen(gm.spriteDB.battle_combatMenu[1]); //Digivolve
                if (battleCallMenuIndex == 2) SetScreen(gm.spriteDB.battle_combatMenu[2]); //Battle card
                if (battleCallMenuIndex == 3) SetScreen(gm.spriteDB.battle_combatMenu[4]); //Deport
            }
            else if (currentScreen == BattleScreen.AttackMenu) {
                SetScreen(gm.spriteDB.battle_attackMenu[attackIndex]);
            }
        }

        private void InitializeRNG() {
            int battleSeed = gm.GetRandomSavedSeed();
            enemyAttackRNG = new sysrand(battleSeed);
        }

        private void OpenDDocks() {
            currentScreen = BattleScreen.BattleCall_DDocks;
            ddockIndex = 0;
        }

        private void CloseDDocks() {
            currentScreen = BattleScreen.MainScreen;
        }

        private void ChooseCurrentDDock() {
            string digimon = gm.logicMgr.GetDDockDigimon(ddockIndex);
            gm.screenMgr.PlayAnimation(gm.screenMgr.ASummonDigimon(digimon));

            currentScreen = BattleScreen.BattleCall_Menu;
            friendlyDigimon = gm.DatabaseMgr.GetDigimon(digimon);
            int friendlyDigimonLevel = gm.logicMgr.GetDigimonExtraLevel(digimon);
            friendlyStats = friendlyDigimon.GetFriendlyStats(friendlyDigimonLevel);
        }
        private void DoRegularTurn(int friendlyAttack) {
            int enemyAttack = ChooseEnemyAttack();
            int winner = ExecuteTurn(ref friendlyAttack, enemyAttack, out bool disobeyed, out int loserHPbefore);

            int friendlyEnergy = friendlyStats.GetEnergyType();
            int enemyEnergy = friendlyStats.GetEnergyType();

            //Display spirits if needed.
            IEnumerator aDisplayTurn = gm.screenMgr.ADisplayTurn(
                friendlyDigimon.name, friendlyAttack, friendlyEnergy,
                enemyDigimon.name, enemyAttack, enemyEnergy,
                winner, disobeyed, loserHPbefore);

            gm.PlayAnimation(aDisplayTurn);

        }

        /// <summary>
        /// Executes the turn and returns the winner. It also outputs the Attack chosen by the enemy
        /// and the life the loser had before being damaged.
        /// This method receives friendlyAttack by reference and will modify it if the Digimon decides to
        /// disobey.
        /// </summary>
        /// <param name="friendlyAttack">The Attack chosen by the player.</param>
        private int ExecuteTurn(ref int friendlyAttack, int enemyAttack, out bool disobeyed, out int loserHPbefore) {
            disobeyed = false;
            if (Random.Range(0f, 1f) > friendlyDigimon.GetObeyChance(playerLevel)) {
                friendlyAttack = 3;
                disobeyed = true;
            }
            else if (Random.Range(0f, 1f) > friendlyDigimon.GetAttackChance(playerLevel)) {
                friendlyAttack = Random.Range(0, 3);
                disobeyed = true;
            }

            int winner = ChooseWinner(friendlyAttack, enemyAttack, out int damageDealt);

            loserHPbefore = (winner == 0) ? enemyStats.HP : friendlyStats.HP;
            DamageDigimon((winner == 0) ? 1 : 0, damageDealt);

            return winner;
        }

        private int ChooseEnemyAttack() {
            int total = enemyStats.EN + enemyStats.CR + enemyStats.AB;
            int rngNumber = enemyAttackRNG.Next(total);

            if (rngNumber < enemyStats.EN) return 0;
            else if (rngNumber < enemyStats.EN + enemyStats.CR) return 1;
            else return 2;
        }

        private int ChooseWinner(int friendlyAttack, int enemyAttack, out int damageDealt) {
            int friendlyDamage = friendlyStats.GetAttackDamage(friendlyAttack);
            int enemyDamage = friendlyStats.GetAttackDamage(enemyAttack);

            if(friendlyAttack == 3) {
                damageDealt = enemyDamage;
                return 1;
            }
            else if(friendlyAttack == enemyAttack) {
                int difference = friendlyDamage - enemyDamage;
                damageDealt = Mathf.Abs(difference);
                if (difference < -5) return 1; //The enemy dealt 5+ more damage than the player.
                if (difference > 5) return 0; //The player dealt 5+ more damage than the enemy.
                else return 2;
            }
            else {
                if(friendlyAttack == 0) {
                    if (enemyAttack == 2) {
                        damageDealt = friendlyDamage;
                        return 0;
                    }
                    else if (enemyAttack == 1) {
                        damageDealt = enemyDamage;
                        return 1;
                    }
                }
                else if (friendlyAttack == 1) {
                    if (enemyAttack == 0) {
                        damageDealt = friendlyDamage;
                        return 0;
                    }
                    else if (enemyAttack == 2) {
                        damageDealt = enemyDamage;
                        return 1;
                    }
                }
                else if (friendlyAttack == 2) {
                    if (enemyAttack == 1) {
                        damageDealt = friendlyDamage;
                        return 0;
                    }
                    else if (enemyAttack == 0) {
                        damageDealt = enemyDamage;
                        return 1;
                    }
                }
            }

            VisualDebug.WriteLine("There was an unknown error choosing the winner of this round.");
            damageDealt = -1;
            return 2;
        }

        private void DamageDigimon(int digimon, int damage) {
            //Enemy bosses receive less damage from attacks.
            if(isBossBattle && digimon == 1) {
                damage -= Mathf.FloorToInt(20f + (0.3f * playerLevel));
                if (damage < 0) damage = 0;
            }

            if(digimon == 0) {
                friendlyStats.HP -= (friendlyStats.HP - damage > 0) ? damage : friendlyStats.HP;
            }
            else if (digimon == 1) {
                enemyStats.HP -= (enemyStats.HP - damage > 0) ? damage : enemyStats.HP;
            }
        }
    }
}